// STD Headers
#include <iostream>
// JNI Headers
#include "jni.h"
using namespace std;
int main(int argc, char *argv[]) {
//定义一个函数指针，下面用来指向JVM中的JNI_CreateJavaVM函数
//typedef jint (WINAPI *PFunCreateJavaVM)(JavaVM **, void **, void *);
int res;
JavaVMInitArgs vm_args;
JavaVMOption options[3];
JavaVM *jvm = NULL;
JNIEnv *env = NULL;
/*设置初始化参数*/
//disable JIT，这是JNI文档中的解释，具体意义不是很清楚 ，能取哪些值也不清楚。
//从JNI文档里给的示例代码中搬过来的
options[0].optionString = "-Djava.compiler=NONE";
//设置classpath，如果程序用到了第三方的JAR包，也可以在这里面包含进来
options[1].optionString = "-Djava.class.path=.;D:\\test_call.jar";
//设置显示消息的类型，取值有gc、class和jni，如果一次取多个的话值之间用逗号格开，如-verbose:gc,class
//该参数可以用来观察C++调用JAVA的过程，设置该参数后，程序会在标准输出设备上打印调用的相关信息
options[2].optionString = "-verbose:gc,class";
//设置版本号，版本号有JNI_VERSION_1_1，JNI_VERSION_1_2和JNI_VERSION_1_4
//选择一个根你安装的JRE版本最近的版本号即可，不过你的JRE版本一定要等于或者高于指定的版本号
vm_args.version = JNI_VERSION_1_8;
vm_args.nOptions = 3;
vm_args.options = options;
//该参数指定是否忽略非标准的参数，如果填JNI_FLASE，当遇到非标准参数时，JNI_CreateJavaVM会返回JNI_ERR
vm_args.ignoreUnrecognized = JNI_TRUE;
//加载JVM.DLL动态库
//HINSTANCE hInstance = ::LoadLibrary("C:\\Program Files\\Java\\jre1.8.0_66\\bin\\server\\jvm.dll");
//if (hInstance == NULL) {
// return false;
//}
//取得里面的JNI_CreateJavaVM函数指针
//PFunCreateJavaVM funCreateJavaVM = (PFunCreateJavaVM)::GetProcAddress(hInstance, "JNI_CreateJavaVM");
//调用JNI_CreateJavaVM创建虚拟机
//res = (*funCreateJavaVM)(&jvm, (void**)&env, &vm_args);
cout << "Prepare successful." << endl;
res = JNI_CreateJavaVM( &jvm, (void**)&env, &vm_args );
cout << "Create JVM." << endl;
if (res < 0) {
return -1;
}
//查找test.Demo类，返回JAVA类的CLASS对象
jclass clazz = env->FindClass("club/sparkfires/TestCall");
if (clazz == NULL) {
cout << "Clazz is null" << endl;
return -1;
} else {
cout << "Clazz is available." << endl;
}
cout << "Find Class Successful." << endl;
//根据类的CLASS对象获取该类的实例
jobject obj = env->AllocObject(clazz);
//cout << "Instance successful." << endl;
//获取类中的方法，最后一个参数是方法的签名，通过javap -s -p 文件名可以获得
jmethodID fun = env->GetMethodID(clazz, "testCall","()V");
//jmethodID staticFun = env->GetStaticMethodID(clazz, "testStaticCall", "()V");
cout << "Get method successful." << endl;

//构造参数并调用对象的方法
env->CallObjectMethod(obj, fun);
//if (staticFun != NULL) {
// env->CallStaticVoidMethod(clazz, staticFun);
//} else {
// cout << "Error method" << endl;
//}
jvm->DestroyJavaVM();
//::FreeLibrary(hInstance);
//cout << "Hello, world!" << endl;
}
